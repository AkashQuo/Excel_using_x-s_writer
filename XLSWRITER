def create_excel_one_o_one(data, excel_head):
    file_name = f'{data["Quant Name"][0]["data"][0]["value"]}report{datetime.now(tz=zone).strftime("%m%d%Y_%H%M%S")}.xlsx'
    file_path = f'/tmp/{file_name}'
    workbook = Workbook(file_path)
    worksheet = workbook.add_worksheet()
    merge_format = workbook.add_format({
        'bold': 1,
        'border': 1,
        'align': 'center',
        'valign': 'vcenter'})
    cell_format = workbook.add_format({'text_wrap': True})
    column = 'A'
    for key in data.keys():
        row = 2
        start_column = column

        for value_item in data[key]:
            location = (column + str(row + 1) + ":" + add_character(column, len(value_item['data']) - 1) + str(
                row + 1)) if len(value_item['data']) > 1 else column + str(row + 1)
            worksheet.merge_range(location, value_item['head'], merge_format)
            worksheet.write(location, value_item['head'], cell_format)
            for value_item_nested in value_item['data']:
                location = column + str(row + 2)
                worksheet.write(location, value_item_nested['head'], cell_format)
                location = column + str(row + 3)
                worksheet.write(location, value_item_nested['value'], cell_format)
                column = add_character(column, 1)
        location = (start_column + str(row) + ":" + remove_character(column,1) + str(row)) if len(
            data[key]) > 1 else column + str(row)
        worksheet.merge_range(location, key, merge_format)
        worksheet.write(location, key, cell_format)
    location = ('A' + str(1) + ":" + column + str(1))
    worksheet.merge_range(location, excel_head, merge_format)
    workbook.close()
    export_link = upload_to_s3(current_app.config.get('S3_BASE_URL'), current_app.config.get('ZEPPLIN_BUCKET'),
                               file_path, file_name)
    return export_link


def add_character(character, no_of_columns):
    length_of_string = len(character)
    first_character = character[0]
    last_character = character[length_of_string - 1]
    if (ord(last_character) + no_of_columns) > 90 or length_of_string != 1:
        if length_of_string == 1:
            no_of_columns = (ord(last_character) + no_of_columns) - 90
            return 'A' + (chr(ord('A') + no_of_columns - 1))
        else:
            if (ord(last_character) + no_of_columns) > 90:
                first_character = (chr(ord(first_character) + 1))
                no_of_columns = (ord(last_character) + no_of_columns) - 90
                last_character = 'A'
                return first_character + (chr(ord(last_character) + no_of_columns - 1))
            else:
                return first_character + (chr(ord(last_character) + no_of_columns))
    else:
        return chr(ord(last_character) + no_of_columns)



def remove_character(character, no_of_columns):
    length_of_string = len(character)
    first_character = character[0]
    last_character = character[length_of_string - 1]

    if ord(last_character) - no_of_columns < 65 and length_of_string == 1:
        return 'Error'
    elif ord(last_character) - no_of_columns > 64 and length_of_string == 1:
        return chr(ord(character) - no_of_columns)
    elif length_of_string > 1:
        if ord(last_character) - no_of_columns > 64:
            last_character = chr(ord(last_character) - no_of_columns)
            return first_character + last_character
        elif ord(last_character) - no_of_columns < 65 and first_character == 'A':
            temp = 65 - ord(last_character)
            last_character = chr(90 - temp)
            return last_character
        else:
            first_character = chr(ord(first_character) - 1)
            temp = 65 - ord(last_character)
            last_character = chr(90 - temp)
            return first_character + last_character

        return first_character + last_character

